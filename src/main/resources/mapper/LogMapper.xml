<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="LogMapper">

    <!-- ===============================
         [회원권 관련]
    =============================== -->

    <!-- 회원권 유효성 확인 -->
    <select id="checkVoucherValid" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM voucher_log
        WHERE memNum = #{memNum}
          AND endDate >= SYSDATE
    </select>

    <!-- 회원권 만료 여부 확인 -->
    <select id="checkVoucherExpired" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM voucher_log
        WHERE memNum = #{memNum}
          AND endDate < SYSDATE
    </select>

    <!-- 회원권 단건 조회 -->
    <select id="selectVoucherByMember" parameterType="long" resultType="VoucherLogDto">
        SELECT voucherId, memNum, memberName, startDate, endDate
        FROM voucher_log
        WHERE memNum = #{memNum}
    </select>

    <!-- 회원권 신규 등록 -->
    <insert id="insertVoucherLog" parameterType="VoucherLogDto">
        <selectKey keyProperty="voucherId" resultType="long" order="BEFORE">
            SELECT voucher_log_seq.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO voucher_log (
            voucherId, memNum, memberName, startDate, endDate
        ) VALUES (
            #{voucherId}, #{memNum}, #{memberName}, SYSDATE, SYSDATE + #{period}
        )
    </insert>

    <!-- 회원권 기간 연장 -->
    <update id="updateVoucherLog" parameterType="VoucherLogDto">
        UPDATE voucher_log
        SET 
            startDate = CASE WHEN endDate < SYSDATE THEN SYSDATE ELSE startDate END,
            endDate   = CASE WHEN endDate < SYSDATE THEN SYSDATE + #{period} ELSE endDate + #{period} END
        WHERE memNum = #{memNum}
    </update>

    <!-- 회원권 로그 직접 수정 -->
    <update id="updateVoucherLogManual" parameterType="VoucherLogDto">
        UPDATE voucher_log
        SET 
            memberName = #{memberName},
            startDate  = #{startDate},
            endDate    = #{endDate}
        WHERE memNum = #{memNum}
    </update>

    <!-- 회원권 삭제 또는 회귀 처리 -->
    <!-- 
      ① 신규 회원권만 존재할 때: 완전 삭제
      ② 기존 회원권 이력 존재 시: 가장 최근 endDate를 이전 endDate로 복귀
      ③ 이용 중(startDate < SYSDATE): 아무 처리 안 함 (Service 단에서 예외 처리)
    -->
    <delete id="rollbackOrDeleteVoucherLog" parameterType="long">
        <!-- ① 신규 회원 (row 1개) → 삭제 -->
        DELETE FROM voucher_log
        WHERE memNum = #{memNum}
          AND (SELECT COUNT(*) FROM voucher_log WHERE memNum = #{memNum}) = 1
          AND startDate >= SYSDATE;

        <!-- ② 기존 회원 (여러 row) → rollback -->
        UPDATE voucher_log
        SET endDate = (
            SELECT MAX(endDate)
            FROM voucher_log
            WHERE memNum = #{memNum}
              AND endDate < (
                  SELECT MAX(endDate)
                  FROM voucher_log
                  WHERE memNum = #{memNum}
              )
        )
        WHERE memNum = #{memNum}
          AND voucherId = (
              SELECT MAX(voucherId)
              FROM voucher_log
              WHERE memNum = #{memNum}
          );
    </delete>


    <!-- ===============================
         [PT 로그 관련]
    =============================== -->

    <!-- PT 충전 로그 등록 -->
    <insert id="insertPtChargeLog" parameterType="PtLogDto">
        <selectKey keyProperty="usageId" resultType="long" order="BEFORE">
            SELECT pt_log_seq.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO pt_log (
            usageId, memNum, empNum, trainerName, memberName,
            status, countChange, totalAmount, consumeAmount, createdAt
        ) VALUES (
            #{usageId}, #{memNum}, #{empNum}, #{trainerName}, #{memberName},
            '충전', #{countChange}, #{totalAmount}, 0, SYSDATE
        )
    </insert>

    <!-- PT 소비 로그 등록 -->
    <insert id="insertPtConsumeLog" parameterType="PtLogDto">
        <selectKey keyProperty="usageId" resultType="long" order="BEFORE">
            SELECT pt_log_seq.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO pt_log (
            usageId, memNum, empNum, trainerName, memberName,
            status, countChange, totalAmount, consumeAmount, createdAt
        ) VALUES (
            #{usageId}, #{memNum}, #{empNum}, #{trainerName}, #{memberName},
            '소비', -1, 0, #{consumeAmount}, SYSDATE
        )
    </insert>

    <!-- PT 변경 로그 등록 -->
    <insert id="insertPtChangeLog" parameterType="PtLogDto">
        <selectKey keyProperty="usageId" resultType="long" order="BEFORE">
            SELECT pt_log_seq.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO pt_log (
            usageId, memNum, empNum, trainerName, memberName,
            status, countChange, totalAmount, consumeAmount, createdAt
        ) VALUES (
            #{usageId}, #{memNum}, #{empNum}, #{trainerName}, #{memberName},
            '변경', #{countChange}, #{totalAmount}, 0, SYSDATE
        )
    </insert>

    <!-- PT 전체 환불 로그 등록 -->
    <insert id="insertPtFullRefundLog" parameterType="PtLogDto">
        <selectKey keyProperty="usageId" resultType="long" order="BEFORE">
            SELECT pt_log_seq.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO pt_log (
            usageId, memNum, empNum, trainerName, memberName,
            status, countChange, totalAmount, consumeAmount, createdAt
        ) VALUES (
            #{usageId}, #{memNum}, #{empNum}, #{trainerName}, #{memberName},
            '환불', -#{countChange}, -#{totalAmount}, 0, SYSDATE
        )
    </insert>

    <!-- PT 로그 직접 수정 -->
    <!-- 복합키(memNum + totalAmount + createdAt) 기반 -->
    <update id="updatePtLogManual" parameterType="PtLogDto">
        UPDATE pt_log
        SET 
            countChange   = #{countChange},
            totalAmount   = #{totalAmount},
            consumeAmount = #{consumeAmount}
        WHERE memNum      = #{memNum}
          AND totalAmount = #{totalAmount}
          AND createdAt   = #{createdAt}
          AND status      = '충전'
    </update>

    <!-- PT 로그 삭제 (예외적 정리용) -->
    <delete id="deletePtLogBySaleInfo" parameterType="map">
        DELETE FROM pt_log
        WHERE memNum      = #{memNum}
          AND totalAmount = #{totalAmount}
          AND createdAt   = #{createdAt}
          AND status      = '충전'
    </delete>

    <!-- 남은 PT 횟수 조회 -->
    <select id="selectRemainingPtCount" parameterType="long" resultType="int">
        SELECT NVL(SUM(countChange), 0)
        FROM pt_log
        WHERE memNum = #{memNum}
    </select>

    <!-- 최근 트레이너 번호 조회 -->
    <select id="selectOldTrainerEmpNum" parameterType="long" resultType="long">
        SELECT empNum
        FROM pt_log
        WHERE memNum = #{memNum}
          AND usageId = (SELECT MAX(usageId) FROM pt_log WHERE memNum = #{memNum})
    </select>

    <!-- 최근 트레이너 이름 조회 -->
    <select id="selectOldTrainerName" parameterType="long" resultType="string">
        SELECT trainerName
        FROM pt_log
        WHERE memNum = #{memNum}
          AND usageId = (SELECT MAX(usageId) FROM pt_log WHERE memNum = #{memNum})
    </select>

    <!-- 총 판매 횟수 (PT) - pt_log 기준 -->
    <select id="selectTotalPtCount" parameterType="long" resultType="int">
        SELECT NVL(SUM(CASE WHEN status IN ('충전', '환불', '변경') THEN countChange ELSE 0 END), 0)
        FROM pt_log
        WHERE memNum = #{memNum}
    </select>

    <!-- 총 판매 금액 (PT) - pt_log 기준 -->
    <select id="selectTotalPtAmount" parameterType="long" resultType="int">
        SELECT NVL(SUM(CASE WHEN status IN ('충전', '환불', '변경') THEN totalAmount ELSE 0 END), 0)
        FROM pt_log
        WHERE memNum = #{memNum}
    </select>

</mapper>
