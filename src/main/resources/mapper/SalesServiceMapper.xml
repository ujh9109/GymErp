<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="SalesServiceMapper">

    <!-- 전체 서비스 판매 내역 조회 -->
    <select id="selectAllSalesServices" resultType="SalesService">
        SELECT *
        FROM SALESSERVICE
        WHERE status != 'DELETED'
        ORDER BY createdAt DESC
    </select>

    <!-- 단일 서비스 판매 내역 조회 -->
    <select id="selectSalesServiceById" parameterType="long" resultType="SalesService">
        SELECT *
        FROM SALESSERVICE
        WHERE serviceSalesId = #{serviceSalesId}
    </select>

    <!-- 서비스 판매 내역 등록 -->
    <insert id="insertSalesService" parameterType="SalesService">
        <selectKey keyProperty="serviceSalesId" resultType="long" order="BEFORE">
            SELECT SALESSERVICE_SEQ.NEXTVAL FROM DUAL
        </selectKey>

        INSERT INTO SALESSERVICE (
            serviceSalesId, serviceId, productName,
            empNum, memNum,
            baseCount, actualCount, discount, baseAmount, actualAmount, avgPrice,
            productType, status, createdAt, updatedAt
        ) VALUES (
            #{serviceSalesId}, #{serviceId}, #{productName},
            #{empNum}, #{memNum},
            #{baseCount}, #{actualCount}, #{discount}, #{baseAmount}, #{actualAmount}, #{avgPrice},
            #{productType}, #{status}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 서비스 판매 내역 수정 -->
    <update id="updateSalesService" parameterType="SalesService">
        UPDATE SALESSERVICE
        SET
            serviceId   = #{serviceId},
            productName = #{productName},
            empNum      = #{empNum},
            memNum      = #{memNum},
            baseCount   = #{baseCount},
            actualCount = #{actualCount},
            discount    = #{discount},
            baseAmount  = #{baseAmount},
            actualAmount = #{actualAmount},
            avgPrice    = #{avgPrice},
            productType = #{productType},
            status      = #{status},
            updatedAt   = #{updatedAt}
        WHERE serviceSalesId = #{serviceSalesId}
    </update>

    <!-- 서비스 판매 내역 삭제 (status = 'DELETED') -->
    <update id="deleteSalesService" parameterType="long">
        UPDATE SALESSERVICE
        SET status = 'DELETED'
        WHERE serviceSalesId = #{serviceSalesId}
    </update>

    <!-- 서비스 매출 통계 조회 -->
    <select id="selectServiceSalesAnalytics" parameterType="map" resultType="map">
        SELECT 
            <choose>
                <when test="periodType == 'YEAR'">
                    TO_CHAR(s.createdAt, 'YYYY') AS periodLabel,
                </when>
                <when test="periodType == 'MONTH'">
                    TO_CHAR(s.createdAt, 'YYYY-MM') AS periodLabel,
                </when>
                <when test="periodType == 'WEEK'">
                    TO_CHAR(s.createdAt, 'IYYY-IW') AS periodLabel,
                </when>
                <otherwise>
                    TO_CHAR(s.createdAt, 'YYYY-MM-DD') AS periodLabel,
                </otherwise>
            </choose>

            e.empName AS employeeName,
            m.memberName AS memberName,
            s.productName AS productName,
            COUNT(s.serviceSalesId) AS salesCount,
            SUM(s.actualAmount) AS totalSalesAmount,
            ROUND(AVG(s.avgPrice), 2) AS avgPrice

        FROM SALESSERVICE s
        JOIN EMPLOYEE e ON s.empNum = e.empNum
        JOIN MEMBER m   ON s.memNum = m.memNum
        WHERE s.status != 'DELETED'

        <if test="startDate != null and endDate != null">
            AND s.createdAt BETWEEN #{startDate} AND #{endDate}
        </if>

        <if test="serviceIds != null and serviceIds.size() > 0">
            AND s.serviceId IN
            <foreach collection="serviceIds" item="sid" open="(" separator="," close=")">
                #{sid}
            </foreach>
        </if>

        <if test="memNum != null">
            AND s.memNum = #{memNum}
        </if>

        <if test="empNum != null">
            AND s.empNum = #{empNum}
        </if>

        <choose>
            <when test="periodType == 'YEAR'">
                GROUP BY TO_CHAR(s.createdAt, 'YYYY'), e.empName, m.memberName, s.productName
            </when>
            <when test="periodType == 'MONTH'">
                GROUP BY TO_CHAR(s.createdAt, 'YYYY-MM'), e.empName, m.memberName, s.productName
            </when>
            <when test="periodType == 'WEEK'">
                GROUP BY TO_CHAR(s.createdAt, 'IYYY-IW'), e.empName, m.memberName, s.productName
            </when>
            <otherwise>
                GROUP BY TO_CHAR(s.createdAt, 'YYYY-MM-DD'), e.empName, m.memberName, s.productName
            </otherwise>
        </choose>

        ORDER BY periodLabel ASC, totalSalesAmount DESC
    </select>

</mapper>
